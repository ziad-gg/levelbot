const firebase = require ("firebase");

async function connect(DataBaseInfo: {}) {
  if (DataBaseInfo == undefined) throw new Error("Invalid parameters !");
  try {
  firebase.initializeApp(DataBaseInfo)
  }catch(e) {
    throw new Error(e);
  }
};


class database {
   private DataBaseInfo : any;
   private options : any;
   private database : any;
   private rootRef : any;
   private default : any;

  constructor(Options: {name: string, default: {}}) {
      this.options = Options;
      this.database = firebase.database();
      this.rootRef = this.database.ref(this.options.name);
      this.default = null;
      if (this.options.default != undefined) {
        this.default = this.options.default;
      }
  }
 async set(key: string) {
   let array: string[] = [];
      if (!key || key.includes(' ') || key.includes('\n')) throw new Error("Invalid key !");
      if (this.default === undefined)  throw new Error("Invalid Schema type !");
          await this.rootRef.once("value", async (data: { val: () => any; }) => {
              array.push(data.val())
          });
        array[key] ? false :  await this.rootRef.child(key).set(this.options.default)  
  };

 async findOne(key: string | string[]) {
      if (!key || key.includes(' ') || key.includes('\n')) throw new Error("Invalid key !");
      if (this.default === undefined)  throw new Error("Invalid Schema type !");
      var data = await this.rootRef.child(key).get();
      if (!data.val() ) {
         return undefined
      }
   
    let c = {
      data: data.val(),
      save: async() => {
        this.rootRef.child(key).update(c.data)
     } 
    }
   return c        
 };

   async delete(key: string | string[]) {
    if (!key || key.includes(' ') || key.includes('\n')) throw new Error("Invalid key !");
    await this.rootRef.child(key).set(null, null).then(() => {
      return true;
    }).catch((err: any) => {
      console.error(err);
      return null;
    });
  }

 async deleteAll() {
  if (this.default === undefined)  throw new Error("Invalid Schema type !");
    await this.rootRef.set('/', null).then(() => {
      return true;
    }).catch((err: any) => {
      console.error(err);
      return null;
    });
 };
};


module.exports = {database, connect};