var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const firebase = require("firebase");
function connect(DataBaseInfo) {
    return __awaiter(this, void 0, void 0, function* () {
        if (DataBaseInfo == undefined)
            throw new Error("Invalid parameters !");
        try {
            firebase.initializeApp(DataBaseInfo);
        }
        catch (e) {
            throw new Error(e);
        }
    });
}
;
class database {
    constructor(Options) {
        this.options = Options;
        this.database = firebase.database();
        this.rootRef = this.database.ref(this.options.name);
        this.default = null;
        if (this.options.default != undefined) {
            this.default = this.options.default;
        }
    }
    set(key) {
        return __awaiter(this, void 0, void 0, function* () {
            let array = [];
            if (!key || key.includes(' ') || key.includes('\n'))
                throw new Error("Invalid key !");
            if (this.default === undefined)
                throw new Error("Invalid Schema type !");
            yield this.rootRef.once("value", (data) => __awaiter(this, void 0, void 0, function* () {
                array.push(data.val());
            }));
            array[key] ? false : yield this.rootRef.child(key).set(this.options.default);
        });
    }
    ;
    findOne(key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!key || key.includes(' ') || key.includes('\n'))
                throw new Error("Invalid key !");
            if (this.default === undefined)
                throw new Error("Invalid Schema type !");
            var data = yield this.rootRef.child(key).get();
            if (!data.val()) {
                return undefined;
            }
            let c = {
                data: data.val(),
                save: () => __awaiter(this, void 0, void 0, function* () {
                    this.rootRef.child(key).update(c.data);
                })
            };
            return c;
        });
    }
    ;
    delete(key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!key || key.includes(' ') || key.includes('\n'))
                throw new Error("Invalid key !");
            yield this.rootRef.child(key).set(null, null).then(() => {
                return true;
            }).catch((err) => {
                console.error(err);
                return null;
            });
        });
    }
    deleteAll() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.default === undefined)
                throw new Error("Invalid Schema type !");
            yield this.rootRef.set('/', null).then(() => {
                return true;
            }).catch((err) => {
                console.error(err);
                return null;
            });
        });
    }
    ;
}
;
module.exports = { database, connect };
//# sourceMappingURL=index.js.map