import{readFileSync as y,writeFileSync as j}from"node:fs";import{dirname as T,join as h,extname as J,basename as R,relative as k}from"node:path";import v from"jsdoc-to-markdown";import{Application as z,TSConfigReader as C}from"typedoc";import{Documentation as S}from"./documentation.mjs";function F({input:a,custom:r,root:p,output:c,typescript:m}){let n=[];if(m){console.log("Parsing Typescript in source files...");const t=new z;t.options.addReader(new C),t.bootstrap({entryPoints:a});const l=t.convert();l&&(n=t.serializer.toObject(l).children,console.log(`${n.length} items parsed.`))}else console.log("Parsing JSDocs in source files..."),n=v.getTemplateDataSync({files:a}),console.log(`${n.length} JSDoc items parsed.`);const o={};if(r){console.log("Loading custom docs files...");const t=T(r),l=y(r,"utf-8"),$=JSON.parse(l);for(const e of $){const i=e.id??e.name.toLowerCase(),b=h(t,e.path??i);o[i]={name:e.name||e.id,files:{}};for(const s of e.files){const d=h(b,s.path),u=J(s.path),w=s.id??R(s.path,u),D=y(d,"utf-8");o[i].files[w]={name:s.name,type:u.toLowerCase().replace(/^\./,""),content:D,path:k(p,d).replace(/\\/g,"/")}}}const f=Object.keys(o).map(e=>Object.keys(o[e])).reduce((e,i)=>e+i.length,0),g=Object.keys(o).length;console.log(`${f} custom docs file${f===1?"":"s"} in ${g} categor${g===1?"y":"ies"} loaded.`)}console.log(`Serializing documentation with format version ${S.FORMAT_VERSION}...`);const O=new S(n,{input:a,custom:r,root:p,output:c,typescript:m},o);c&&(console.log(`Writing to ${c}...`),j(c,JSON.stringify(O.serialize()))),console.log("Done!")}export{F as build};
//# sourceMappingURL=index.mjs.map
