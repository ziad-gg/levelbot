"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const t=require("./types.cjs");function n(e){if(typeof e=="string")return e;if(t.isArrayType(e))return`Array<${n(e.elementType)}>`;if(t.isConditionalType(e)){const{checkType:i,extendsType:s,trueType:y,falseType:r}=e;return`${n(i)} extends ${n(s)} ? ${n(y)} : ${n(r)}`}if(t.isIndexedAccessType(e))return`${n(e.objectType)}[${n(e.indexType)}]`;if(t.isIntersectionType(e))return e.types.map(n).join(" & ");if(t.isPredicateType(e))return(e.asserts?"asserts ":"")+e.name+(e.targetType?` is ${n(e.targetType)}`:"");if(t.isReferenceType(e))return e.name+(e.typeArguments?`<${e.typeArguments.map(n).join(", ")}>`:"");if(t.isReflectionType(e)){const i={},{children:s,signatures:y}=e.declaration;if(s&&s.length>0){for(const r of s){const{type:p}=r;p&&(i[r.name]=n(p))}return`{
${Object.entries(i).map(([r,p])=>`${r}: ${p}`).join(`,
`)}
}`}if(y&&y.length>0){const r=y[0];return`(${r?.parameters?.map(p=>`${p.name}: ${p.type?n(p.type):"unknown"}`)?.join(", ")??"...args: unknown[]"}) => ${r?.type?n(r.type):"unknown"}`}return"{}"}return t.isLiteralType(e)?typeof e.value=="string"?`'${e.value}'`:`${e.value}`:t.isTupleType(e)?`[${(e.elements??[]).map(n).join(", ")}]`:t.isTypeOperatorType(e)?`${e.operator} ${n(e.target)}`:t.isUnionType(e)?e.types.map(n).filter(i=>Boolean(i)&&i.trim().length>0).join(" | "):t.isQueryType(e)?`(typeof ${n(e.queryType)})`:t.isInferredType(e)||t.isIntrinsicType(e)||t.isUnknownType(e)?e.name:"unknown"}exports.parseType=n;
//# sourceMappingURL=parseType.cjs.map
