{"version":3,"file":"types.cjs","sources":["../../src/util/types.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport type { JSONOutput } from 'typedoc';\n\ninterface QueryType {\n\ttype: 'query';\n\tqueryType: JSONOutput.SomeType;\n}\n\nexport function isArrayType(value: any): value is JSONOutput.ArrayType {\n\treturn typeof value == 'object' && value.type === 'array';\n}\n\nexport function isConditionalType(value: any): value is JSONOutput.ConditionalType {\n\treturn typeof value == 'object' && value.type === 'conditional';\n}\n\nexport function isIndexedAccessType(value: any): value is JSONOutput.IndexedAccessType {\n\treturn typeof value == 'object' && value.type === 'indexedAccess';\n}\n\nexport function isInferredType(value: any): value is JSONOutput.InferredType {\n\treturn typeof value == 'object' && value.type === 'inferred';\n}\n\nexport function isIntersectionType(value: any): value is JSONOutput.IntersectionType {\n\treturn typeof value == 'object' && value.type === 'intersection';\n}\n\nexport function isIntrinsicType(value: any): value is JSONOutput.IntrinsicType {\n\treturn typeof value == 'object' && value.type === 'intrinsic';\n}\n\nexport function isPredicateType(value: any): value is JSONOutput.PredicateType {\n\treturn typeof value == 'object' && value.type === 'predicate';\n}\n\nexport function isReferenceType(value: any): value is JSONOutput.ReferenceType {\n\treturn typeof value == 'object' && value.type === 'reference';\n}\n\nexport function isReflectionType(value: any): value is JSONOutput.ReflectionType {\n\treturn typeof value == 'object' && value.type === 'reflection';\n}\n\nexport function isLiteralType(value: any): value is JSONOutput.LiteralType {\n\treturn typeof value == 'object' && value.type === 'literal';\n}\n\nexport function isTupleType(value: any): value is JSONOutput.TupleType {\n\treturn typeof value == 'object' && value.type === 'tuple';\n}\n\nexport function isTypeOperatorType(value: any): value is JSONOutput.TypeOperatorType {\n\treturn typeof value == 'object' && value.type === 'typeOperator';\n}\n\nexport function isUnionType(value: any): value is JSONOutput.UnionType {\n\treturn typeof value == 'object' && value.type === 'union';\n}\n\nexport function isUnknownType(value: any): value is JSONOutput.UnknownType {\n\treturn typeof value == 'object' && value.type === 'unknown';\n}\n\nexport function isQueryType(value: any): value is QueryType {\n\treturn typeof value == 'object' && value.type === 'query';\n}\n"],"names":[],"mappings":";;;;AAAO,SAAS,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,OAAO,CAAQ,SAAS,iBAAiB,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,aAAa,CAAQ,SAAS,mBAAmB,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,eAAe,CAAQ,SAAS,cAAc,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,UAAU,CAAQ,SAAS,kBAAkB,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,cAAc,CAAQ,SAAS,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,WAAW,CAAQ,SAAS,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,WAAW,CAAQ,SAAS,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,WAAW,CAAQ,SAAS,gBAAgB,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,YAAY,CAAQ,SAAS,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,SAAS,CAAQ,SAAS,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,OAAO,CAAQ,SAAS,kBAAkB,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,cAAc,CAAQ,SAAS,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,OAAO,CAAQ,SAAS,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,SAAS,CAAQ,SAAS,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,GAAG,OAAO;;;;;;;;;;;;;;;;;;"}