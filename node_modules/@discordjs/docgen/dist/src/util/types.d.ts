import type { JSONOutput } from 'typedoc';
interface QueryType {
    type: 'query';
    queryType: JSONOutput.SomeType;
}
export declare function isArrayType(value: any): value is JSONOutput.ArrayType;
export declare function isConditionalType(value: any): value is JSONOutput.ConditionalType;
export declare function isIndexedAccessType(value: any): value is JSONOutput.IndexedAccessType;
export declare function isInferredType(value: any): value is JSONOutput.InferredType;
export declare function isIntersectionType(value: any): value is JSONOutput.IntersectionType;
export declare function isIntrinsicType(value: any): value is JSONOutput.IntrinsicType;
export declare function isPredicateType(value: any): value is JSONOutput.PredicateType;
export declare function isReferenceType(value: any): value is JSONOutput.ReferenceType;
export declare function isReflectionType(value: any): value is JSONOutput.ReflectionType;
export declare function isLiteralType(value: any): value is JSONOutput.LiteralType;
export declare function isTupleType(value: any): value is JSONOutput.TupleType;
export declare function isTypeOperatorType(value: any): value is JSONOutput.TypeOperatorType;
export declare function isUnionType(value: any): value is JSONOutput.UnionType;
export declare function isUnknownType(value: any): value is JSONOutput.UnknownType;
export declare function isQueryType(value: any): value is QueryType;
export {};
//# sourceMappingURL=types.d.ts.map