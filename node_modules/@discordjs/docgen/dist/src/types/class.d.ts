import type { DeclarationReflection } from 'typedoc';
import { DocumentedConstructor } from './constructor.js';
import { DocumentedEvent } from './event.js';
import { DocumentedItem } from './item.js';
import { DocumentedMember } from './member.js';
import { DocumentedMethod } from './method.js';
import { DocumentedVarType } from './var-type.js';
import type { Class, Config } from '../interfaces/index.js';
export declare class DocumentedClass extends DocumentedItem<Class | DeclarationReflection> {
    readonly props: Map<string, DocumentedMember>;
    readonly methods: Map<string, DocumentedMethod>;
    readonly events: Map<string, DocumentedEvent>;
    construct: DocumentedConstructor | null;
    extends: DocumentedVarType | null;
    implements: DocumentedVarType | null;
    constructor(data: Class | DeclarationReflection, config: Config);
    add(item: DocumentedConstructor | DocumentedMethod | DocumentedMember | DocumentedEvent): void;
    serializer(): {
        name: string;
        description: string | undefined;
        see: (string | undefined)[] | undefined;
        extends: unknown;
        implements: unknown;
        access: string | undefined;
        abstract: true | undefined;
        deprecated: string | boolean | undefined;
        construct: unknown;
        props: unknown[] | undefined;
        methods: unknown[] | undefined;
        events: unknown[] | undefined;
        meta: unknown;
    } | {
        name: string;
        description: string;
        see: string[] | undefined;
        extends: unknown;
        implements: unknown;
        access: import("../interfaces/access.type.js").Access | undefined;
        abstract: boolean | undefined;
        deprecated: string | boolean | undefined;
        construct: unknown;
        props: unknown[] | undefined;
        methods: unknown[] | undefined;
        events: unknown[] | undefined;
        meta: unknown;
    };
}
//# sourceMappingURL=class.d.ts.map